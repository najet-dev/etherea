import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { loadStripe, Stripe } from '@stripe/stripe-js';
import { catchError, Observable, throwError } from 'rxjs';
import { environment } from 'src/environments/environment';
import { PaymentRequest } from '../components/models/paymentRequest.model';
import { PaymentResponse } from '../components/models/paymentResponse.model';

@Injectable({
  providedIn: 'root',
})
export class PaymentService {
  private apiUrl = `${environment.apiUrl}/payments`;
  private stripePromise = loadStripe(environment.stripePublicKey);

  constructor(private httpClient: HttpClient) {}

  /**
   * Loads a Stripe instance if not already loaded.
   * @returns Promise<Stripe | null>
   */
  async getStripeInstance(): Promise<Stripe | null> {
    return this.stripePromise;
  }

  /**
   * Creates a payment request with the backend.
   * @param paymentRequest Payment information.
   * @returns Observable containing clientSecret and transaction ID.
   */
  createPayment(paymentRequest: PaymentRequest): Observable<PaymentResponse> {
    return this.httpClient
      .post<PaymentResponse>(`${this.apiUrl}/createPayment`, paymentRequest)
      .pipe(
        catchError((error) => {
          console.error('Erreur lors de la création du paiement :', error);
          return throwError(
            () => new Error('Échec de la création du paiement.')
          );
        })
      );
  }

  /**
   * Confirms a payment by providing the transaction ID and the payment method ID.
   * @param paymentIntentId The ID of the PaymentIntent generated by Stripe.
   * @param paymentMethodId The ID of the selected payment method.
   * @returns Observable with updated payment status.
   */
  confirmPayment(
    paymentIntentId: string,
    paymentMethodId: string
  ): Observable<PaymentResponse> {
    return this.httpClient
      .post<PaymentResponse>(`${this.apiUrl}/confirm`, {
        paymentIntentId,
        paymentMethodId,
      })
      .pipe(
        catchError((error) => {
          console.error('Erreur lors de la confirmation du paiement :', error);
          return throwError(
            () => new Error('Échec de la confirmation du paiement.')
          );
        })
      );
  }
}
